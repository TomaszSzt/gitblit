#
# In this example we show how to override 
# debugging settings to provide detailed information
# about what and where have happen in GIT blit
#
# Settings made with this file do CONFLICT with --dailyLogFile command line
# and web.debugMode option overriding their effects.
#
# To activate this example rename it to "log4j.properties"
# and restart server.
#

#
#	In below example we are saying that globally we are interested
#	in messages on the level INFO and are going to output it to
#	console.
#
#	If output to a file is expected use:
#
#	log4j.rootLogger=INFO, R
#
#		Note: The --dailyLogFile server command line parameter is an 
#			  another option to output to a file, but
#			  we should not use it with conjunction with this settings.
#
#	Other levels You may use are ERROR,WARN,INFO,DEBUG,ALL, from most important
#	(ERROR) to less (ALL).
#
log4j.rootLogger=INFO, S

#
#	In this line we are telling that all JAVA classes which come from
#	any com.gitblit.* package should report everything they can do.
#
log4j.logger.com.gitblit=ALL
#
#	Now, since we are doing a bug hunt we do enable 
#	full blow formatting which will tell us not only a message, but also where
#	exactly it was made in code. Notice, this hurts performance.

#
#	Below line ensures, that specified layout is used for file storage
#
log4j.appender.R.layout = org.apache.log4j.PatternLayout
#
#	And what exactly the layout is. The %d means the date of message, 
#	with up to 1ms accuracy.
#	The %l means source information 
#	%p means priority (the -5) means "left pad with spaces up to 5 chars long
#	%m means "message"
#	%n means "end of line"
#
log4j.appender.R.layout.ConversionPattern = %d{yyyy-MM-dd HH:mm:ss.SSS} [%-5p] %n %l %n %m%n

#
#	We do repeat it for console output.
#
log4j.appender.S.layout = org.apache.log4j.PatternLayout
log4j.appender.S.layout.ConversionPattern = %d{yyyy-MM-dd HH:mm:ss.SSS} %l [%-5p] %n %l %n %m%n